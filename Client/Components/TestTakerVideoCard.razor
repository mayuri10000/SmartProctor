@{
    RenderFragment toggleCamera = @<Template>
                                      <Icon Type="video-camera" OnClick="ToggleCamera" Style="@(showingDesktop ? "" : "color:blue")"></Icon>
                                  </Template>;

    RenderFragment toggleDesktop = @<Template>
                                       <Icon Type="desktop" OnClick="ToggleDesktop" Style="@(showingDesktop ? "color:blue" : "")"></Icon>
                                   </Template>;

    RenderFragment iconWarnings = @<Template>
                                      <Icon Type="warning" Style="@(hasWarnings ? "color:red;" : "")"></Icon>
                                  </Template>;
}

<Card Size="small" Title="@TestTakerName" Actions="new[] {toggleCamera, toggleDesktop, iconWarnings}"
      Style="margin-bottom: 20px; margin-right: 20px">
    <Extra>
        <Icon Type="expand" Theme="outline" OnClick="Enlarge"/>
    </Extra>
    <Body>
    <video id="@(TestTakerName + "-video")" class="proctor-video" autoplay></video>
    </Body>
</Card>

@code
{
    [Parameter]
    public string TestTakerName { get; set; }

    [Parameter] 
    public EventCallback OnToggleCamera { get; set; }

    [Parameter] 
    public EventCallback OnToggleDesktop { get; set; }
    
    [Parameter]
    public EventCallback OnEnlarge { get; set; }
    

    private bool showingDesktop;
    private bool hasWarnings;
    
    

    private async Task ToggleDesktop()
    {
        await OnToggleDesktop.InvokeAsync();
        showingDesktop = true;
        StateHasChanged();
    }

    private async Task ToggleCamera()
    {
        await OnToggleCamera.InvokeAsync();
        showingDesktop = false;
        StateHasChanged();
    }

    private async Task Enlarge()
    {
        await OnEnlarge.InvokeAsync();
    }
}