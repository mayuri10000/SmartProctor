@using SmartProctor.Shared.Responses
@inject HttpClient Http

@{
    RenderFragment footer = @<div>
                                <Button Disabled="@(currentStep == 1)" OnClick="Previous">Previous</Button>
                                <Button
                                    Type="primary"
                                    Style="@(currentStep == 4 ? "display:none" : "")"
                                    OnClick="Next">
                                    Next
                                </Button>
                                <Button Type="primary" Disabled="@(currentStep < 4)" 
                                        OnClick="async () => await OnFinish.InvokeAsync()">
                                    Finish
                                </Button>
                            </div>;
}

<Modal Title="Enter the test" Footer="footer" Visible="Visible" Style="width:800px; ">
    <div style="@(currentStep == 1 ? "" : "display:none")">
        <Paragraph>
            Before entering the test, please get your DeepLens hardware connected. To
            set up the DeepLens hardware, please connect it to your PC with a USB wire. Note
            that the USB wire should be connected to the USB port marked with "Registration".
        </Paragraph>
        <Paragraph>
            <Image Src="/img/camera_setup.png" Preview="false"></Image>
        </Paragraph>
        <Paragraph>
            If you are using a wired connection or VPN, disconnect them since they will make the
            DeepLens hardware undetectable. After connected, click "Detect". Once detected, verify that
            the displayed serial number is identical to the S/N printed on the device, then click "Next"
        </Paragraph>

        <Paragraph>
            <Button Type="primary" OnClick="DetectHardware" Loading="isDetecting">Detect</Button>
        </Paragraph>
    </div>
    <div style="@(currentStep == 2 ? "" : "display:none")">
        <Paragraph>
            To get your DeepLens device online, please plug in a USB Ethernet adapter or connect to a
            wireless network.
        </Paragraph>
        <Paragraph>
            Device network status:
            @if (ethernetConnected)
            {
                <div>
                    Wired network:&nbsp;&nbsp;
                    <Icon Type="check-circle" Theme="outline" Style="color: green"/>
                    <label style="color: green">&nbsp;Connected</label>
                </div>
            }
            else
            {
                <div>
                    Wired network:&nbsp;&nbsp;
                    <Icon Type="close-circle" Theme="outline" Style="color: red"/>
                    <label style="color: red">&nbsp;Not connected</label>
                </div>
            }
            @if (wirelessSSID != null)
            {
                <div>
                    Wireless network:&nbsp;&nbsp;
                    <Icon Type="check-circle" Theme="outline" Style="color: green"/>
                    <label style="color: green">&nbsp;Connected, SSID: @wirelessSSID</label>
                </div>
            }
            else
            {
                <div>
                    Wireless network:&nbsp;&nbsp;
                    <Icon Type="close-circle" Theme="outline" Style="color: red"/>
                    <label style="color: red">&nbsp;Not connected</label>
                </div>
            }
        </Paragraph>
        <Paragraph>
            <Button OnClick="GetNetworkStatus">Refresh network status</Button>
        </Paragraph>
        @if (wifiList != null)
        {
            <Paragraph>
                Connect to a new wireless network:
            </Paragraph>
            <Space>
                <SpaceItem>
                    <Select @bind-Value="@selectedWifi"
                             Style="width: 240px;"
                             TItemValue="string"
                             TItem="string"
                             Placeholder="Select a wireless network">
                        <SelectOptions>
                            @foreach (var wifi in wifiList)
                            {
                                <SelectOption TItemValue="string" TItem="string"
                                              Value="wifi.Ssid" Label="@wifi.Ssid"/>
                            }
                        </SelectOptions>
                    </Select>
                </SpaceItem>
                <SpaceItem>
                    <Input TValue="string" @bind-value="@wifiPassword" PlaceHolder="Wireless password" Style="width: 240px;"/>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="primary" Loading="isWifiConnecting" OnClick="ConnectWifi">Connect</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button OnClick="GetWifiList">
                        <Icon Type="reload" Theme="outline"/>
                    </Button>
                </SpaceItem>
            </Space>
        }
    </div>
    <div style="@(currentStep == 3 ? "" : "display:none")">
        <Paragraph>
            Please wait until the camera video from the DeepLens shows on the page. Then unplug the USB cable and put
            your DeepLens hardware on an angle where your entire desktop, your computer screen is visible.
        </Paragraph>
        <Paragraph>
            <video class="proctor-video-large" id="camera-video-dialog" autoplay></video>
        </Paragraph>
    </div>
    <div style="@(currentStep == 4 ? "" : "display:none")">
        <Paragraph>
            Click the "Share screen" below to share your desktop to the proctor, you should share your entire screen
            instead of a window or a browser tab
        </Paragraph>
        <Paragraph>
            <Button Type="primary" OnClick="() => OnShareScreen.InvokeAsync()">Share screen</Button>
        </Paragraph>
            <Paragraph>
                <video class="proctor-video-large" id="desktop-video-dialog" autoplay></video>
            </Paragraph>
        </div>
    @if (tipType != 0)
    {
        <div style="color: @(tipType == 1 ? "green" : "red")">
            <Icon Type="@(tipType == 1 ? "check-circle" : "close-circle")" Theme="outline"/>&nbsp;
            <label>&nbsp;@tipText</label>
        </div>
    }
</Modal>

@code {
    private int currentStep = 1;
    private bool isDetecting = false;
    private bool isDetected = false;

    private int tipType;
    private string tipText;

    private bool ethernetConnected;
    private string wirelessSSID;

    private DeepLensWifiListItem[] wifiList;

    private string selectedWifi = "";
    private string wifiPassword = "";
    private bool isWifiConnecting = false;

        private const string DEEPLENS_SETTING_URL = "https://camera-amdc.net:8080";

    [Parameter]
    public EventCallback OnShareScreen { get; set; }
    
    [Parameter]
    public EventCallback OnFinish { get; set; }
    
    [Parameter]
    public string ExamId { get; set; }
    
    [Parameter]
    public bool Visible { get; set; }

    private async Task ToStep(int step)
    {
        tipText = "";
        tipType = 0;
        currentStep = step;
        if (currentStep == 2)
        {
            await GetNetworkStatus();
            await GetWifiList();
        }
        else if (currentStep == 3)
        {
            await DeepLensLogin();
        }
        StateHasChanged();
    }

    private async Task Previous()
    {
        await ToStep(--currentStep);
    }

    private async Task Next()
    {
        await ToStep(++currentStep);
    }

    private async Task DetectHardware()
    {
        try
        {
            isDetecting = true;
            StateHasChanged();
            var res = await Http.GetFromJsonAsync<DeepLensSerialNumberResponse>(DEEPLENS_SETTING_URL + "/sn");

            if (res != null)
            {
                isDetected = true;
                tipType = 1;
                tipText = "Detected, device S/N:" + res.SerialNumber;
            }
            else
            {
                tipType = -1;
                tipText = "Detection failed";
            }
        }
        catch
        {
            tipType = -1;
            tipText = "Detection failed";
        }

        
        isDetecting = false;
        StateHasChanged();
    }

    private async Task GetNetworkStatus()
    {
        try
        {
            var res = await Http.GetFromJsonAsync<DeepLensNetworkStatusResponse>(DEEPLENS_SETTING_URL + "/network_status");

            wirelessSSID = res.Wifi;
            ethernetConnected = res.Ethernet;
        }
        catch
        {
            tipType = -1;
            tipText = "Failed to obtain device network status";
        }
        StateHasChanged();
    }

    private async Task GetWifiList()
    {
        try
        {
            var res = await Http.GetFromJsonAsync<DeepLensWifiListResponse>(DEEPLENS_SETTING_URL + "/wifi_ssids");

            wifiList = res.WifiList;
        }
        catch
        {
            tipType = -1;
            tipText = "Failed to obtain the wireless network list";
        }
        StateHasChanged();
    }

    public bool ShareScreenComplete(string streamLabel)
    {
        if (streamLabel == "screen:0:0")
        {
            tipType = 1;
            tipText = "Screen capture obtained successfully";
            return true;
        }
        else if (streamLabel.StartsWith("screen"))
        {
            tipType = -1;
            tipText = "Please make sure that you have only one monitor";
        }
        else
        {
            tipType = -1;
            tipText = "Please share your entire screen, instead of a window or browser tab";
        }
        
        return false;
    }

    private async Task ConnectWifi()
    {
        try
        {
            isWifiConnecting = true;

            var encodedSsid = System.Web.HttpUtility.UrlEncode(selectedWifi);
            var encodedPassword = System.Web.HttpUtility.UrlEncode(wifiPassword);

            var res = await Http.GetFromJsonAsync<DeepLensActionResponse>(DEEPLENS_SETTING_URL + "/connect_wifi"
                                                                          + "?ssid=" + encodedSsid + "&password=" + encodedPassword);
            if (res.Success)
            {
                tipType = 1;
                tipText = "Successfully connect to selected network";
                await GetNetworkStatus();
            }
            else
            {
                tipType = -1;
                tipText = "Failed connect to selected network (probably wrong password or weak signal)";
            }
        }
        catch
        {
            tipType = -1;
            tipText = "An error occured when connecting to network";
        }

        isWifiConnecting = false;
        StateHasChanged();
    }

    public async Task DeepLensLogin()
    {
        try
        {
            var tokenRes = await Http.GetFromJsonAsync<DeepLensTokenResponseModel>("/api/user/GenerateDeepLensToken");
            var token = tokenRes.Token;

            var res = await Http.GetFromJsonAsync<DeepLensActionResponse>(DEEPLENS_SETTING_URL + "/login" +
                                                                          "?token=" + token + "&eid=" + ExamId);
            if (!res.Success)
            {
                tipType = -1;
                tipText = "Failed to login your account on the DeepLens device";
            }
        }
        catch
        {
            tipType = -1;
            tipText = "An error occured when getting your DeepLens device connected";
        }
    }

    private class DeepLensSerialNumberResponse
    {
        public string SerialNumber { get; set; }
    }

    private class DeepLensNetworkStatusResponse
    {
        public bool Ethernet { get; set; }
        public string Wifi { get; set; }
    }

    private class DeepLensWifiListItem
    {
        public string Ssid { get; set; }
        public int Strength { get; set; }
        public string Security { get; set; }
    }

    private class DeepLensWifiListResponse
    {
        public DeepLensWifiListItem[] WifiList { get; set; }
    }

    private class DeepLensWifiConnectRequest
    {
        public string Name { get; set; }
        public string Password { get; set; }
    }

    private class DeepLensActionResponse
    {
        public bool Success { get; set; }
    }
}